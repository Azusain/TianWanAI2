# Development Environment for 9.3 Project
FROM nvidia/cuda:12.6.3-cudnn-runtime-ubuntu22.04

ENV WORKDIR=/root
ENV PATH="${WORKDIR}/venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
WORKDIR ${WORKDIR}

# Set timezone
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3.11 \
        python3.11-venv \
        python3.11-dev \
        libgl1-mesa-glx \
        libglib2.0-0 \
        libgomp1 \
        gcc \
        g++ \
        git \
        ca-certificates \
        curl \
        wget \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create virtual environment
RUN python3.11 -m venv venv

# Copy requirements and install Python dependencies
COPY requirements.txt ./
RUN . venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir torch torchvision --index-url https://download.pytorch.org/whl/cu126 && \
    pip install --no-cache-dir -r requirements.txt && \
    rm requirements.txt

# Create symlink for python
RUN ln -sf /usr/bin/python3.11 /usr/bin/python3

# Copy YOLO submodules and install them during build
COPY YOLO-main-helmet /tmp/YOLO-main-helmet
COPY YOLO-main-safetybelt /tmp/YOLO-main-safetybelt  
COPY YOLO-main-fire /tmp/YOLO-main-fire

# Install YOLO packages during build with proper error handling
RUN . venv/bin/activate && \
    # Install helmet detection
    pip install -e /tmp/YOLO-main-helmet/ --no-deps && \
    # Install safetybelt detection
    pip install -e /tmp/YOLO-main-safetybelt/ --no-deps && \
    # Install fire detection with CUDA ops disabled
    cd /tmp/YOLO-main-fire && \
    sed -i 's/if sys.platform != "win32":/if False:/' setup.py && \
    pip install -e . --no-deps && \
    # Clean up
    cd / && rm -rf /tmp/YOLO-* && \
    find venv -name "*.pyc" -delete && \
    find venv -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Set working directory to app for mounted code
WORKDIR /app

# Keep container running
CMD ["tail", "-f", "/dev/null"]
